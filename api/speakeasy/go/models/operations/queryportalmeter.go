// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/internal/utils"
	"openapi/models/components"
	"time"
)

type QueryPortalMeterRequest struct {
	MeterSlug string `pathParam:"style=simple,explode=false,name=meterSlug"`
	// Start date-time in RFC 3339 format.
	// Inclusive.
	//
	From *time.Time `queryParam:"style=form,explode=true,name=from"`
	// End date-time in RFC 3339 format.
	// Inclusive.
	//
	To *time.Time `queryParam:"style=form,explode=true,name=to"`
	// If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	//
	WindowSize *components.WindowSize `queryParam:"style=form,explode=true,name=windowSize"`
	// The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	//
	WindowTimeZone *string `default:"UTC" queryParam:"style=form,explode=true,name=windowTimeZone"`
	// If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	//
	GroupBy []string `queryParam:"style=form,explode=true,name=groupBy"`
}

func (q QueryPortalMeterRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(q, "", false)
}

func (q *QueryPortalMeterRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &q, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *QueryPortalMeterRequest) GetMeterSlug() string {
	if o == nil {
		return ""
	}
	return o.MeterSlug
}

func (o *QueryPortalMeterRequest) GetFrom() *time.Time {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *QueryPortalMeterRequest) GetTo() *time.Time {
	if o == nil {
		return nil
	}
	return o.To
}

func (o *QueryPortalMeterRequest) GetWindowSize() *components.WindowSize {
	if o == nil {
		return nil
	}
	return o.WindowSize
}

func (o *QueryPortalMeterRequest) GetWindowTimeZone() *string {
	if o == nil {
		return nil
	}
	return o.WindowTimeZone
}

func (o *QueryPortalMeterRequest) GetGroupBy() []string {
	if o == nil {
		return nil
	}
	return o.GroupBy
}

type QueryPortalMeterResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// OK
	MeterQueryResult *components.MeterQueryResult
	// OK
	Res *string
}

func (o *QueryPortalMeterResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *QueryPortalMeterResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *QueryPortalMeterResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *QueryPortalMeterResponse) GetMeterQueryResult() *components.MeterQueryResult {
	if o == nil {
		return nil
	}
	return o.MeterQueryResult
}

func (o *QueryPortalMeterResponse) GetRes() *string {
	if o == nil {
		return nil
	}
	return o.Res
}
