// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/internal/utils"
	"openapi/models/components"
	"time"
)

type ListEventsRequest struct {
	// Start date-time in RFC 3339 format.
	// Inclusive.
	//
	From *time.Time `queryParam:"style=form,explode=true,name=from"`
	// End date-time in RFC 3339 format.
	// Inclusive.
	//
	To *time.Time `queryParam:"style=form,explode=true,name=to"`
	// Number of events to return.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
}

func (l ListEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListEventsRequest) GetFrom() *time.Time {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListEventsRequest) GetTo() *time.Time {
	if o == nil {
		return nil
	}
	return o.To
}

func (o *ListEventsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

type ListEventsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Events response
	Classes []components.IngestedEvent
}

func (o *ListEventsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListEventsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListEventsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListEventsResponse) GetClasses() []components.IngestedEvent {
	if o == nil {
		return nil
	}
	return o.Classes
}
