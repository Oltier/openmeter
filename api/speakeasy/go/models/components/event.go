// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"openapi/internal/utils"
	"time"
)

// Datacontenttype - Content type of the data value. Must adhere to RFC 2046 format.
type Datacontenttype string

const (
	DatacontenttypeApplicationJSON Datacontenttype = "application/json"
)

func (e Datacontenttype) ToPointer() *Datacontenttype {
	return &e
}

func (e *Datacontenttype) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "application/json":
		*e = Datacontenttype(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Datacontenttype: %v", v)
	}
}

// Event - CloudEvents Specification JSON Schema
type Event struct {
	// Identifies the event.
	ID string `json:"id"`
	// Identifies the context in which an event happened.
	Source string `json:"source"`
	// The version of the CloudEvents specification which the event uses.
	Specversion string `json:"specversion"`
	// Describes the type of event related to the originating occurrence.
	Type string `json:"type"`
	// Content type of the data value. Must adhere to RFC 2046 format.
	Datacontenttype *Datacontenttype `json:"datacontenttype,omitempty"`
	// Identifies the schema that data adheres to.
	Dataschema *string `json:"dataschema,omitempty"`
	// Describes the subject of the event in the context of the event producer (identified by source).
	Subject string `json:"subject"`
	// Timestamp of when the occurrence happened. Must adhere to RFC 3339.
	Time *time.Time `json:"time,omitempty"`
	// The event payload.
	Data map[string]interface{} `json:"data,omitempty"`
}

func (e Event) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Event) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Event) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Event) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

func (o *Event) GetSpecversion() string {
	if o == nil {
		return ""
	}
	return o.Specversion
}

func (o *Event) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *Event) GetDatacontenttype() *Datacontenttype {
	if o == nil {
		return nil
	}
	return o.Datacontenttype
}

func (o *Event) GetDataschema() *string {
	if o == nil {
		return nil
	}
	return o.Dataschema
}

func (o *Event) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *Event) GetTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.Time
}

func (o *Event) GetData() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Data
}
