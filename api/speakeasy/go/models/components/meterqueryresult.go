// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"openapi/internal/utils"
	"time"
)

type MeterQueryResult struct {
	From *time.Time `json:"from,omitempty"`
	To   *time.Time `json:"to,omitempty"`
	// Aggregation window size.
	WindowSize *WindowSize     `json:"windowSize,omitempty"`
	Data       []MeterQueryRow `json:"data"`
}

func (m MeterQueryResult) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeterQueryResult) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MeterQueryResult) GetFrom() *time.Time {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *MeterQueryResult) GetTo() *time.Time {
	if o == nil {
		return nil
	}
	return o.To
}

func (o *MeterQueryResult) GetWindowSize() *WindowSize {
	if o == nil {
		return nil
	}
	return o.WindowSize
}

func (o *MeterQueryResult) GetData() []MeterQueryRow {
	if o == nil {
		return []MeterQueryRow{}
	}
	return o.Data
}
