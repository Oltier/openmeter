// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"openapi/internal/utils"
	"time"
)

type MeterQueryRow struct {
	Value       float64   `json:"value"`
	WindowStart time.Time `json:"windowStart"`
	WindowEnd   time.Time `json:"windowEnd"`
	// The subject of the meter value.
	Subject *string           `json:"subject,omitempty"`
	GroupBy map[string]string `json:"groupBy,omitempty"`
}

func (m MeterQueryRow) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeterQueryRow) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MeterQueryRow) GetValue() float64 {
	if o == nil {
		return 0.0
	}
	return o.Value
}

func (o *MeterQueryRow) GetWindowStart() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.WindowStart
}

func (o *MeterQueryRow) GetWindowEnd() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.WindowEnd
}

func (o *MeterQueryRow) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *MeterQueryRow) GetGroupBy() map[string]string {
	if o == nil {
		return nil
	}
	return o.GroupBy
}
