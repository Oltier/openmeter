// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/openmeterio/openmeter/pkg/models"
)

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Meter defines model for Meter.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterValue defines model for MeterValue.
type MeterValue = models.MeterValue

// Namespace defines model for Namespace.
type Namespace = models.Namespace

// Problem A Problem Details object (RFC 7807)
type Problem = models.Problem

// WindowSize defines model for WindowSize.
type WindowSize = models.WindowSize

// MeterSlug defines model for meterSlug.
type MeterSlug = string

// NamespaceInput defines model for namespaceParam.
type NamespaceInput = string

// IngestEventsParams defines parameters for IngestEvents.
type IngestEventsParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// ListMetersParams defines parameters for ListMeters.
type ListMetersParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// CreateMeterParams defines parameters for CreateMeter.
type CreateMeterParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// DeleteMeterParams defines parameters for DeleteMeter.
type DeleteMeterParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// GetMeterParams defines parameters for GetMeter.
type GetMeterParams struct {
	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// GetMeterValuesParams defines parameters for GetMeterValues.
type GetMeterValuesParams struct {
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// From Start date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Must be aligned with the window size.
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *WindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// OMNamespace Optional namespace
	NamespaceInput *NamespaceInput `json:"OM-Namespace,omitempty"`
}

// IngestEventsJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsJSONRequestBody = Event

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreateNamespaceJSONRequestBody defines body for CreateNamespace for application/json ContentType.
type CreateNamespaceJSONRequestBody = Namespace

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request, params IngestEventsParams)

	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request, params ListMetersParams)

	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request, params CreateMeterParams)

	// (DELETE /api/v1/meters/{meterSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterSlug MeterSlug, params DeleteMeterParams)

	// (GET /api/v1/meters/{meterSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterSlug MeterSlug, params GetMeterParams)

	// (GET /api/v1/meters/{meterSlug}/values)
	GetMeterValues(w http.ResponseWriter, r *http.Request, meterSlug MeterSlug, params GetMeterValuesParams)

	// (POST /api/v1/namespaces)
	CreateNamespace(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params IngestEventsParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMetersParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug MeterSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterSlug"), &meterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug MeterSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterSlug"), &meterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeterParams

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeterValues operation middleware
func (siw *ServerInterfaceWrapper) GetMeterValues(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug MeterSlug

	err = runtime.BindStyledParameterWithLocation("simple", false, "meterSlug", runtime.ParamLocationPath, chi.URLParam(r, "meterSlug"), &meterSlug)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMeterValuesParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	headers := r.Header

	// ------------- Optional header parameter "OM-Namespace" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("OM-Namespace")]; found {
		var NamespaceInput NamespaceInput
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "OM-Namespace", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "OM-Namespace", runtime.ParamLocationHeader, valueList[0], &NamespaceInput)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "OM-Namespace", Err: err})
			return
		}

		params.NamespaceInput = &NamespaceInput

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeterValues(w, r, meterSlug, params)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateNamespace operation middleware
func (siw *ServerInterfaceWrapper) CreateNamespace(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNamespace(w, r)
	})

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterSlug}/values", wrapper.GetMeterValues)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/namespaces", wrapper.CreateNamespace)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"T1V5utVOW9YX6/8FAAD//9+/h6MiKgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
